// defines pins numbers
const int trigPin = 9;
const int echoPin = 10;
const int buzzer = 11;

// defines variables
long duration;
int distance;
int safetyDistance;


void setup() 
{
  pinMode(trigPin, OUTPUT); // Sets the trigPin as an Output
  pinMode(echoPin, INPUT); // Sets the echoPin as an Input
  pinMode(buzzer, OUTPUT);
  Serial.begin(9600); // Starts the serial communication
}


void loop() 
{
  // Clears the trigPin
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);

  // Sets the trigPin on HIGH state for 10 micro seconds
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);

  // Reads the echoPin, returns the sound wave travel time in microseconds
  duration = pulseIn(echoPin, HIGH);

  // Calculating the distance
  distance = duration * 0.034 / 2;
  Serial.println(distance);
  safetyDistance = distance;
  if (safetyDistance > 50) {
    noTone (buzzer);
  } else if (safetyDistance > 40) {
    tone(buzzer, 900);
    delay(1000);
    noTone (buzzer);
    delay(1000);
  } else if (safetyDistance > 30) {
    tone(buzzer, 900);
    delay(700);
    noTone(buzzer);
    delay(700);
  } else if (safetyDistance > 20) {
    for (int i = 1; i<=2; i++){
      tone(buzzer, 900);
      delay(200);
      noTone(buzzer);
      if( i == 2){
        break;
      }
      delay(200);
    }
    delay(300);
  } else if (safetyDistance > 10) {
    for (int i = 1; i<=3; i++){
      tone(buzzer, 900);
      delay(150);
      noTone(buzzer);
      if( i == 3){
        break;
      }
      delay(150);
    }
    delay(300);
  } else {
        for (int i = 1; i<=3; i++){
      tone(buzzer, 900);
      delay(150);
      noTone(buzzer);
      if( i == 3){
        break;
      }
      delay(150);
    }
    delay(150);
  }

  // Prints the distance on the Serial Monitor
  Serial.print("Distance: ");
  Serial.println(distance);
}
